<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="https://fjank.no/feed.xml" rel="self" type="application/atom+xml" /><link href="https://fjank.no/" rel="alternate" type="text/html" hreflang="en" /><updated>2019-05-31T20:58:23+02:00</updated><id>https://fjank.no/feed.xml</id><title type="html">Fjanks security pages</title><subtitle>A blog about security, CTF, vulnerabilities, pen-testing and other interesting things that are related to security. Mostly writeups from results of challenges, war-games, hacking into local vulnerable VM's and similar. I will try to make the writeups as realistic as possible by including all my wrong assumptions and failures. Also I will try to not include code complete walkthroughs, but leave the actual coding as an excercise to the reader.
</subtitle><author><name>Fjank</name></author><entry><title type="html">OverTheWire natas 10</title><link href="https://fjank.no/blog/2019-05-31-overthewire-natas-10/" rel="alternate" type="text/html" title="OverTheWire natas 10" /><published>2019-05-31T00:00:00+02:00</published><updated>2019-05-31T00:00:00+02:00</updated><id>https://fjank.no/blog/overthewire-natas-10</id><content type="html" xml:base="https://fjank.no/blog/2019-05-31-overthewire-natas-10/">&lt;p&gt;&lt;a href=&quot;/blog/2019-03-17-overthewire-natas-5-9/&quot;&gt;Read Previous - OverTheWire level 5-9 walkthrough.&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://overthewire.org&quot;&gt;OverTheWire&lt;/a&gt; is a wargame site with several challenges.
For a beginner like me, it contains several challenges with a nice increase in
difficulty.
This is the third entry of a writeup of the &lt;a href=&quot;http://overthewire.org/wargames/natas/&quot;&gt;natas&lt;/a&gt;
challenges, which teaches the basics of serverside web-security. I will not
expose the actual passwords, but rather walk you through the mind-process
of searching for and finding vulnerabilities.&lt;/p&gt;

&lt;p&gt;By going through all the levels of these challenges, you will learn how to
break basic security (and protect against these attacks!), gain basic knowledge on various
tools such as: html, server configuration, browser developer tools,
basic shell commands, vulnerability checker tools, kali linux and get some basic
programming experience.&lt;/p&gt;

&lt;h2 id=&quot;level-10&quot;&gt;Level 10&lt;/h2&gt;
&lt;p&gt;It looks like a hardened version of &lt;a href=&quot;/blog/2019-03-17-overthewire-natas-5-9/&quot;&gt;Level 9&lt;/a&gt;. Same functionality, even so kind to let us peek at the actual source code, to avoid guessing.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/overthewire-natas10-1.png&quot; alt=&quot;Natas 10 landing page&quot; /&gt;&lt;/p&gt;
&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;natas10&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

For security reasons, we now filter on certain characters&lt;span class=&quot;nt&quot;&gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;form&amp;gt;&lt;/span&gt;
Find words containing: &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;needle&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;submit&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;submit&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Search&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;


Output:
&lt;span class=&quot;nt&quot;&gt;&amp;lt;pre&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;?&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;array_key_exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;needle&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_REQUEST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_REQUEST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;needle&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;preg_match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/[;|&amp;amp;]/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Input contains an illegal character!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;passthru&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;grep -i &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; dictionary.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;viewsource&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;index-source.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;View sourcecode&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The change this time is that they have a &lt;a href=&quot;http://regextutorials.com/&quot;&gt;regex&lt;/a&gt; check first for the characters &lt;code class=&quot;highlighter-rouge&quot;&gt;;|&amp;amp;&lt;/code&gt;, so our previous trick to chain commands will not work this time. But they have not escaped &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;&lt;/code&gt;, so we can actually use grep to get the contents of our required file. Consider what is actually invoked by using “” as a search parameter:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; dictionary.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This will return the entire file, just as cat. Soo by searching for &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;&quot; /etc/natas_webpass/natas11 #&lt;/code&gt; The command will be:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; /etc/natas_webpass/natas11 &lt;span class=&quot;c&quot;&gt;# dictionary.txt&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# We are now searching for everything, listing the entire file, and commenting out the dictionary.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Blacklisting defaults to approve all, and reject only the items you have listed.
Blacklisting requires you to know of all vulnerabilities and threats for the item you are sanitizing, both known and unknown. This is usually a very bad idea of obvious reasons. 
Whitelisting defaults to deny all, and approve only the items you have listed, in this case only allow characters &lt;code class=&quot;highlighter-rouge&quot;&gt;a-z A-z 0-9&lt;/code&gt; and perhaps &lt;code class=&quot;highlighter-rouge&quot;&gt;'&lt;/code&gt;, do remember to properly escape the singlequote before sending in to passthru.&lt;/p&gt;

&lt;p&gt;Blacklist/Whitelist principles is not only for command injection, but should be used wherever there exists a possibility for a user to input text that will be passed through to SQL, command, HTML etc. etc.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Lessons learned: If you need to sanitize input, use a whitelist of allowed items, never a blacklist of illegal items.&lt;/em&gt;&lt;/p&gt;</content><author><name>Fjank</name></author><summary type="html">OverTheWire natas 10</summary></entry><entry><title type="html">OverTheWire natas 5-9</title><link href="https://fjank.no/blog/2019-03-17-overthewire-natas-5-9/" rel="alternate" type="text/html" title="OverTheWire natas 5-9" /><published>2019-03-17T00:00:00+01:00</published><updated>2019-03-17T00:00:00+01:00</updated><id>https://fjank.no/blog/overthewire-natas-5-9</id><content type="html" xml:base="https://fjank.no/blog/2019-03-17-overthewire-natas-5-9/">&lt;p&gt;&lt;a href=&quot;/blog/2019-03-14-overthewire-natas-0-4/&quot;&gt;Read Previous - OverTheWire level 0-4 walkthrough.&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://overthewire.org&quot;&gt;OverTheWire&lt;/a&gt; is a wargame site with several challenges.
For a beginner like me, it contains several challenges with a nice increase in
difficulty.
This is the second entry of a writeup of the &lt;a href=&quot;http://overthewire.org/wargames/natas/&quot;&gt;natas&lt;/a&gt;
challenges, which teaches the basics of serverside web-security. I will not
expose the actual passwords, but rather walk you through the mind-process
of searching for and finding vulnerabilities.&lt;/p&gt;

&lt;p&gt;By going through all the levels of these challenges, you will learn how to
break basic security (and protect against these attacks!), gain basic knowledge on various
tools such as: html, server configuration, browser developer tools,
basic shell commands, vulnerability checker tools, kali linux and get some basic
programming experience.&lt;/p&gt;

&lt;h2 id=&quot;level-5&quot;&gt;Level 5&lt;/h2&gt;
&lt;p class=&quot;message&quot;&gt;&lt;strong&gt;Tools recommended:&lt;/strong&gt; &lt;a href=&quot;https://portswigger.net/&quot;&gt;Burp Suite&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here we are met with a page stating that we are not logged in, and no interaction features.
&lt;img src=&quot;/assets/img/overthewire-natas5-1.png&quot; alt=&quot;Natas 5 landing page&quot; /&gt;
The source code looks equally empty. In some way the site has figured out that we are not logged in, so lets look at 
the site &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies&quot;&gt;cookies&lt;/a&gt; (using the browser developer tools), 
as cookies is a good way to store session handles.&lt;/p&gt;

&lt;p&gt;There should be a cookie there with the name “loggedin” with value 0 (This is NOT the correct way to store session 
information!). This time we are going to use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies&quot;&gt;Burp Suite’s Repeater&lt;/a&gt; to manipulate the request before sending to natas5. 
Repeater is a fantastic exploratory tool to test various techniques and theories.&lt;/p&gt;

&lt;p&gt;Make sure you have installed and set up Burp suite and configured your browser. Just follow PageSwigger getting started
instructions on their site. When visiting natas5, Burp Suite should intercept this request in the “Proxy” tab.
there you should click the “Action” button, and select “Send to Repeater”. Now you are finished in the “Proxy” tab, 
so you could turn off intercept by clicking the “Intercept is on” button.&lt;/p&gt;

&lt;p&gt;If you now switch to the “Repeater” tab, you will see the complete raw request that is sent to natas5. 
You may press the “Go” button to see the response, do also explore the params and headers tabs to see what info is there.
I have removed most of the headers sent, leaving only the necessary headers.
&lt;img src=&quot;/assets/img/overthewire-natas5-2.png&quot; alt=&quot;Burp suite Repeater for natas5&quot; /&gt;
In the params tab change the isloggedin cookie value from 0 to 1, then press the “Go” button. If you now inspect the 
result, you will see the the server is now happy, and gives you the password for the next level.&lt;/p&gt;

&lt;p&gt;Also take a look at the raw tab, to see what you actually sent to the server. You could also change the values directly 
in the raw tab.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Lessons learned: Don’t store data at all in the cookies, they are easily spoofed.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;level-6&quot;&gt;Level 6&lt;/h2&gt;
&lt;p&gt;This time we are met with a page with an input field “Input secret”, and a submit button, and it also seems we have 
a link to the server side source code for help. A few tests with the input field, gives us “Wrong secret”. 
So obviously we need to find the correct secret to solve this one.
&lt;img src=&quot;/assets/img/overthewire-natas6-1.png&quot; alt=&quot;Natas 6 landing page&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lets take a look at the included source code:&lt;/p&gt;
&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;natas6&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;?&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;includes/secret.inc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;array_key_exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;submit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$secret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'secret'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Access granted. The password for natas7 is &amp;lt;censored&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Wrong secret&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
Input secret: &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;secret&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;br&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;submit&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;viewsource&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;index-source.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;View sourcecode&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we get a sample of the actual server side code that is executed on our request. Seems like the language is &lt;a href=&quot;http://www.php.net/&quot;&gt;php&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;First a secret.inc file is loaded into the file&lt;/li&gt;
  &lt;li&gt;If browsers &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods&quot;&gt;request method&lt;/a&gt; is POST (and submit exists)&lt;/li&gt;
  &lt;li&gt;And the variable named &lt;code class=&quot;highlighter-rouge&quot;&gt;$secret&lt;/code&gt; is the same as the posted variable secret: we get the password for the next level.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;$secret&lt;/code&gt; variable is obviously loaded in the &lt;code class=&quot;highlighter-rouge&quot;&gt;includes/secret.inc&lt;/code&gt;. Perhaps we can look at the file in the browser?
A request for &lt;a href=&quot;http://natas6.natas.labs.overthewire.org/includes/secret.inc&quot;&gt;natas6.natas.labs.overthewire.org/includes/secret.inc&lt;/a&gt; actually returns the file, and there the 
secret is exposed. Now it’s just a matter of writing in the correct secret and submit, then you get the password for the
next level.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Lessons learned: If you have files with sensitive data, don’t leave them in the web-published folder. They will be found.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;level-7&quot;&gt;Level 7&lt;/h2&gt;
&lt;p&gt;This level has two links, “Home” and “About”.
&lt;img src=&quot;/assets/img/overthewire-natas7-1.png&quot; alt=&quot;Natas 7 landing page&quot; /&gt;
By clicking the links, we see that there is a variable that changes, that allows us to change the page that is loaded.
This is probably done (as in the previous example) with a &lt;a href=&quot;http://php.net/manual/en/function.include.php&quot;&gt;php include&lt;/a&gt;.
When using php include, the developer must be sure to sanitize the input to make sure that only legal values
are allowed. A quick attempt to see if sanitation is done at all is to change the page variable do something illegal.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://natas7.natas.labs.overthewire.org/index.php?page=aaa

Warning: include(aaa): failed to open stream: No such file or directory in /var/www/natas/natas7/index.php on line 21
Warning: include(): Failed opening 'aaa' for inclusion (include_path='.:/usr/share/php:/usr/share/pear') in /var/www/natas/natas7/index.php on line 21
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Seems like they use include, and that no apparent sanitation is performed. We even get an error message that confirms that 
include is indeed used.
As was stated in the beginning of the challenges, the passwords are stored at &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/natas_webpass/natasxx&lt;/code&gt;, 
so we should try to use that as a page &lt;a href=&quot;http://natas7.natas.labs.overthewire.org/index.php?page=/etc/natas_webpass/natas8&quot;&gt;natas7.natas.labs.overthewire.org/index.php?page=/etc/natas_webpass/natas8&lt;/a&gt;
That should give us the password for the next level.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Lessons learned: Don’t trust parameters from the browser. Never put un-sanitized data into an php include. Don’t expose error messages to the browser.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;level-8&quot;&gt;Level 8&lt;/h2&gt;
&lt;p&gt;Hm, seems like a repeat of level 6, probably a bit hardened this time. A secret input field, a submit button, and a link
to the server-side code. 
&lt;img src=&quot;/assets/img/overthewire-natas8-1.png&quot; alt=&quot;Natas 8 landing page&quot; /&gt;
Lets take a look at the included source code:&lt;/p&gt;
&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;natas8&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;&amp;lt;?&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$encodedSecret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;3d3d516343746d4d6d6c315669563362&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;encodeSecret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$secret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bin2hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;strrev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;base64_encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$secret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;array_key_exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;submit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;encodeSecret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'secret'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$encodedSecret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Access granted. The password for natas9 is &amp;lt;censored&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Wrong secret&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
Input secret: &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;secret&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;br&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;submit&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;viewsource&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;index-source.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;View sourcecode&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;First an encoded secret is defined&lt;/li&gt;
  &lt;li&gt;If browsers request method is POST&lt;/li&gt;
  &lt;li&gt;Then our secret is fed into the &lt;a href=&quot;http://php.net/manual/en/functions.user-defined.php&quot;&gt;function&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;encodeSecret&lt;/code&gt; and the result is compared to the encoded secret.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, this is encoding/cryptography/algebra basics. Our input &lt;code class=&quot;highlighter-rouge&quot;&gt;secret&lt;/code&gt; is fed into the function &lt;code class=&quot;highlighter-rouge&quot;&gt;encodeSecret&lt;/code&gt; and 
should result into &lt;code class=&quot;highlighter-rouge&quot;&gt;encodedSecret&lt;/code&gt;. Both the result and the encoding algorithm are known, so the input should also be 
known.
Let’s take a closer look at the &lt;code class=&quot;highlighter-rouge&quot;&gt;encodeSecret&lt;/code&gt; function, and &lt;a href=&quot;https://refactoring.com/&quot;&gt;refactor&lt;/a&gt; it a bit to make it easier to understand.&lt;/p&gt;
&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;encodeSecret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$secret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$b64&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;base64_encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$secret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$reversed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;strrev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$b64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$hexstr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bin2hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$reversed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$hexstr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Apparently this function does the following transforms on the input (‘a’ used as an example):&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://php.net/manual/en/function.base64-encode.php&quot;&gt;Base 64 encode&lt;/a&gt; the input. (YQ==)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://php.net/manual/en/function.strrev.php&quot;&gt;Reverses&lt;/a&gt; the base 64 string. (==QY)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://php.net/manual/en/function.bin2hex.php&quot;&gt;converts to hexadecimal&lt;/a&gt; representation. (3d3d5159)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, by creating our own function that does the reverse, we could easily find the required string to input that makes 
natas 8 happy. On way is to use the same programming language as the server (php), and use the inverse 
functions: &lt;a href=&quot;http://php.net/manual/en/function.hex2bin.php&quot;&gt;hex2bin&lt;/a&gt; and &lt;a href=&quot;http://php.net/manual/en/function.base64-decode.php&quot;&gt;Base 64 decode&lt;/a&gt;.
Or you could use your favourite programming language, or probably even a standard shell.
Quickest way for me was to use &lt;a href=&quot;https://www.python.org/&quot;&gt;python&lt;/a&gt;, which should give you the correct secret to use to get the password
for the lext level:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;binascii&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;base64&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;encodedSecred&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'3d3d516343746d4d6d6c315669563362'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;reversed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;binascii&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unhexlify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encodedSecret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'ISO-8859-1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b64&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;reversed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;secret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b64decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'ISO-8859-1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Lessons learned: If you want to encrypt something, use a one-way encryption algorithm. Encodings like this are easily broken.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;level-9&quot;&gt;Level 9&lt;/h2&gt;
&lt;p&gt;We are on this level met with something that looks like a search. inputting various text into the search gives us a list
of the words that contain the input. This time also they have been kind enough to give us the server source code.
&lt;img src=&quot;/assets/img/overthewire-natas9-1.png&quot; alt=&quot;Natas 9 landing page&quot; /&gt;&lt;/p&gt;
&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;natas9&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;form&amp;gt;&lt;/span&gt;
Find words containing: &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;needle&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;submit&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;submit&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Search&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;


Output:
&lt;span class=&quot;nt&quot;&gt;&amp;lt;pre&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;?&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;array_key_exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;needle&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_REQUEST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_REQUEST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;needle&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;passthru&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;grep -i &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; dictionary.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;viewsource&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;index-source.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;View sourcecode&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So no include this time, but another construct, &lt;a href=&quot;http://php.net/manual/en/function.passthru.php&quot;&gt;passthru&lt;/a&gt; which 
apparently calls an external program &lt;a href=&quot;https://www.gnu.org/savannah-checkouts/gnu/grep/manual/grep.html&quot;&gt;grep&lt;/a&gt; with some input and our search.&lt;/p&gt;

&lt;p&gt;One thing that immediately hits me here, is that the request param is sent un-sanitized into the passthru call, 
leaving the door wide open for  &lt;a href=&quot;https://www.owasp.org/index.php/Command_Injection&quot;&gt;command injection&lt;/a&gt;.
Let’s see how to prove for ourselves that command injection is possible.
I like to use &lt;a href=&quot;http://man7.org/linux/man-pages/man1/ls.1.html&quot;&gt;ls -al&lt;/a&gt; as a proof, so lets try that.
We cannot control the beginning &lt;code class=&quot;highlighter-rouge&quot;&gt;grep -i &lt;/code&gt; nor the end &lt;code class=&quot;highlighter-rouge&quot;&gt;dictionary.txt&lt;/code&gt;, but it seems we are free do to what we want in the middle.
So we can make the grep return nothing, add a command separator, slap on a comment to ignore the rest of the line.
Here it is good to experiment yourself in a shell first, to see what works and what does not.
So, by entering &lt;code class=&quot;highlighter-rouge&quot;&gt;nonono dictionary.txt;ls -al; #&lt;/code&gt; as a search term, that should end up as:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; nonono dictionary.txt&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-al&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# dictionary.txt&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# The first command 'grep -i nonono dictionary.txt' will return nothing.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# The second command 'ls -al' should give us the directory listing.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# The final string has now been made to a comment, doing nothing.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Seems we got the directory listing, so command injection was successful.
It should now be quite easy to get the password for the next level using &lt;a href=&quot;https://ss64.com/bash/cat.html&quot;&gt;cat&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Lessons learned: Avoid user controlled input to include/passtru or similar in other languages. If unavoidable, at least sanitize the input first.&lt;/em&gt;&lt;/p&gt;</content><author><name>Fjank</name></author><summary type="html">OverTheWire natas 5-9</summary></entry><entry><title type="html">OverTheWire natas 0-4</title><link href="https://fjank.no/blog/2019-03-14-overthewire-natas-0-4/" rel="alternate" type="text/html" title="OverTheWire natas 0-4" /><published>2019-03-14T00:00:00+01:00</published><updated>2019-03-14T00:00:00+01:00</updated><id>https://fjank.no/blog/overthewire-natas-0-4</id><content type="html" xml:base="https://fjank.no/blog/2019-03-14-overthewire-natas-0-4/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://overthewire.org&quot;&gt;OverTheWire&lt;/a&gt; is a wargame site with several challenges.
For a beginner like me, it contains several challenges with a nice increase in
difficulty.
This is the first entry of a writeup of the &lt;a href=&quot;http://overthewire.org/wargames/natas/&quot;&gt;natas&lt;/a&gt;
challenges, which teaches the basics of serverside web-security. I will not
expose the actual passwords, but rather walk you through the mind-process
of searching for and finding vulnerabilities.&lt;/p&gt;

&lt;p&gt;By going through all the levels of these challenges, you will learn how to
break basic security (and protect against these attacks!), gain basic knowledge on various
tools such as: html, server configuration, browser developer tools,
basic shell commands, vulnerability checker tools, kali linux and get some basic
programming experience.&lt;/p&gt;

&lt;h2 id=&quot;level-0&quot;&gt;Level 0&lt;/h2&gt;
&lt;p class=&quot;message&quot;&gt;&lt;strong&gt;Tools recommended:&lt;/strong&gt; A browser. I use &lt;a href=&quot;https://www.google.com/chrome/&quot;&gt;Chrome&lt;/a&gt;
or &lt;a href=&quot;https://www.mozilla.org/en-US/firefox/new/&quot;&gt;Firefox&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;View &lt;a href=&quot;https://www.w3schools.com/html/html_intro.asp&quot;&gt;the source&lt;/a&gt;,
and look for the comment with the password for the next level.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Lessons learned: Don’t leave comments with sensitive data, they are easy to find.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;level-1&quot;&gt;Level 1&lt;/h2&gt;
&lt;p&gt;Use the web developer tools (&lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/&quot;&gt;Chrome DevTools&lt;/a&gt;,
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Tools&quot;&gt;Firefox developer tools&lt;/a&gt;)
to show the source where you will find the password.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Lessons learned: Blocking right-click is useless.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;level-2&quot;&gt;Level 2&lt;/h2&gt;
&lt;p class=&quot;message&quot;&gt;&lt;strong&gt;Tools recommended:&lt;/strong&gt; &lt;a href=&quot;http://linuxcommand.org/lc3_lts0010.php&quot;&gt;A shell&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As the page says, there is nothing on this page.
As in the previous level, I started by looking at the source, this time there
was nothing hidden in the source, except a reference to an image.&lt;br /&gt;
I inspected the &lt;a href=&quot;https://code.tutsplus.com/tutorials/http-headers-for-dummies--net-8039&quot;&gt;response headers&lt;/a&gt;
to see if anything was hidden there, nada.&lt;br /&gt;
I downloaded the image and displayed the raw data to see if there was something hidden
in the image, nada.&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;pixel.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Perhaps there are other files in the same folder as the image? Lets try to open
the folder in the browser: http://natas2.natas.labs.overthewire.org/files/.&lt;br /&gt;
Directory browsing is allowed, thus we see all the files including a file
containing the password to the next level.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Lessons learned: Make sure directory browsing is disabled.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;level-3&quot;&gt;Level 3&lt;/h2&gt;
&lt;p class=&quot;message&quot;&gt;&lt;strong&gt;Tools recommended:&lt;/strong&gt; &lt;a href=&quot;https://tools.kali.org/web-applications/dirb&quot;&gt;dirb&lt;/a&gt;/&lt;a href=&quot;https://www.owasp.org/index.php/Category:OWASP_DirBuster_Project&quot;&gt;dirbuster&lt;/a&gt;/&lt;a href=&quot;https://www.kali.org/&quot;&gt;Kali linux&lt;/a&gt;.
You can manage nicely at this point
without using any of these tools, but everything will be easier if you install
Kali linux, as it contains massive amount of tools, almost everything you need.&lt;/p&gt;
&lt;p&gt;Another page where there is nothing on the page.
The source contains a comment with a hint. Since I hate to guess, I used &lt;code class=&quot;highlighter-rouge&quot;&gt;dirb&lt;/code&gt;
to enumerate all common files/directories that may be found on a server.&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;dirb http://natas3.natas.labs.overthewire.org &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; natas3:&amp;lt;passwd&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Amongst the output you should find an interesting file: &lt;code class=&quot;highlighter-rouge&quot;&gt;robots.txt&lt;/code&gt;&lt;br /&gt;
The &lt;a href=&quot;http://www.robotstxt.org/&quot;&gt;robots file&lt;/a&gt; revealed a hidden directory (still with directory browsing enabled),
where a file containing the password to the next level can be found.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Lessons learned: robots.txt should not expose sensitive information.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;level-4&quot;&gt;Level 4&lt;/h2&gt;
&lt;p class=&quot;message&quot;&gt;&lt;strong&gt;Tools recommended:&lt;/strong&gt; &lt;a href=&quot;https://www.gnu.org/software/wget/manual/wget.html&quot;&gt;wget&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The text on the page says it all. The way the page knows where we are coming
from is usually by inspecting the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer&quot;&gt;Referer header&lt;/a&gt;.
This can easily be faked, and there are tons of tools that can do this for us.
There is no need to bring up the big cannons yet, so we just use a “simple” tool
like &lt;code class=&quot;highlighter-rouge&quot;&gt;wget&lt;/code&gt;. It seems simple enough, but there is enormous power hiding behind
the four letters. I recommend to use &lt;code class=&quot;highlighter-rouge&quot;&gt;wget&lt;/code&gt; as a first “go-to-tool”
when you need to do simple request manipulation, as that will let you experiment
very quickly with various variables.&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# The standard get of the page with no referer.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# --quiet to stop wget's output, you may want to skip this to see what wget is doing.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# -O - Will write the output to the standard out instead of a file.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wget &lt;span class=&quot;nt&quot;&gt;--quiet&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; - http://natas4:&amp;lt;passwd&amp;gt;@natas4.natas.labs.overthewire.org/
&lt;span class=&quot;c&quot;&gt;# A get with a faked referer header.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wget &lt;span class=&quot;nt&quot;&gt;--quiet&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--referer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;http://natas5.natas.labs.overthewire.org/ &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; - http://natas4:&amp;lt;passwd&amp;gt;@natas4.natas.labs.overthewire.org/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;It seems the referer header was the correct assumption, and the page delivered
the password for the next level.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Lessons learned: Do not trust the browser, everything can be faked.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/blog/2019-03-17-overthewire-natas-5-9/&quot;&gt;Read Next - OverTheWire level 5-9 walkthrough.&lt;/a&gt;&lt;/p&gt;</content><author><name>Fjank</name></author><summary type="html">OverTheWire natas 0-4</summary></entry></feed>